akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  stdout-loglevel = "INFO"
  log-config-on-start = off
  log-dead-letters-during-shutdown = true

  actor {
    debug {
      lifecycle = on
      receive = on
      autoreceive = on
      fsm = on
      event-stream = on

    }
    # if there's no blocking in the default dispeacther, no need to have 3(default) times as many threads
    # in the pool as there as cpu cores
    default-dispatcher {
      fork-join-executor {
        parallelism-min = 1
        parallelism-factor = 2
      }

    }
  }

  blocking-dispatcher {   # for blocking actors
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 5       # min number of threads that will be created
      parallelism-factor = 1  # determines the pool size by available cpu_count * factor, bounded by min and max parallelism
      parallelism-max = 10      # max number of threads that will be created
      throughput = 10
    }
  }

}

spray {

  can.server {
    request-timeout = 3s
    ssl-encryption = on
    server-header = ""
    # turn off stats supports in production
    # stats-support = off
  }
}

site {
  interface = "localhost"
  port = 8081
  dev-mode = on
  application-secret-key = "8610d2f41ef1b4a8ade067f578be51d6" # data encryption key
  mac-secret-key = "1c3ecdf142d24df4bd22c35bacdd94b4" # mac encryption
  encryption-log-rounds = 12
  account-lockout = on
  account-lockout-max-attempts = 3
  account-lockout-period = 60
  session-cookie-name = "__sid"
  session-cookie-max-age = 480
  remember-cookie-name = "__rid"
  remember-cookie-max-age = 1209600 # two weeks
  login-csrf-token = "loginCsfrToken"
  session-csrf-token = "sessionCsfrToken"
}

execution-contexts {
  # try to make the number of blocking thread count equal to max number of connections in the connection pool
  blocking-thread-count = ${bonecp.max-connections-per-partition} # times partition count
  cpu-intensive-thread-count = 2
  # might want to dedicate a seperate connection pool for long running queries
}

bonecp {
  url =  "jdbc:postgresql://localhost:5432/app1"
  username = "app"
  password = "123456"
  driver-class = "org.postgresql.Driver"
  autocommit = true
  # In order to reduce lock contention and thus improve performance,
  # each incoming connection request picks off a connection from a
  # pool that has thread-affinity.
  # The higher this number, the better your performance will be for the
  # case when you have plenty of short-lived threads.
  # Beyond a certain threshold, maintenance of these pools will start
  # to have a negative effect on performance (and only for the case
  # when connections on a partition start running out).
  partition-count = 3
  min-connections-per-partition = 5
  max-connections-per-partition = 10
  acquire-increment = 1
  acquire-retry-attempts = 10
  acquire-retry-delay = 2 seconds
  connection-timeout = 1 seconds
  init-sql = "SELECT 1"
  idle-connection-test-period = 5 minutes
  idle-max-age = 10 minutes
  statement-cache-size = 200
}